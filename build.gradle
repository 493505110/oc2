plugins {
	id 'fabric-loom' version '0.5-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

def getGitRef() {
	try {
		def stdout = new ByteArrayOutputStream()
		exec {
			commandLine 'git', 'rev-parse', '--short', 'HEAD'
			standardOutput = stdout
		}
		return stdout.toString().trim()
	} catch (Throwable ignored) {
		return "unknown"
	}
}

String semver = "${mod_version_major}.${mod_version_minor}.${mod_version_patch}"

String build_number = System.getenv("PROMOTED_NUMBER");
if (build_number == null)
	build_number = System.getenv("BUILD_NUMBER")
if (build_number == null)
	build_number = getGitRef()

archivesBaseName = project.archives_base_name
version = "${semver}+${build_number}"
group = project.maven_group

configurations {
	embed
	implementation.extendsFrom embed
}

repositories {
	mavenCentral()
	maven { url "http://maven.cil.li/" } // Sedna
	maven { url "https://mod-buildcraft.com/maven" } // Buildcraft
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	compileOnly 'org.jetbrains:annotations:16.0.2'

	modCompile "alexiil.mc.lib:libblockattributes-all:0.8.5"

	embed 'li.cil.ceres:ceres:0.0.2+'
	embed 'li.cil.sedna:sedna:0.0.1+'
	embed 'li.cil.sedna:sedna-buildroot:0.0.1+'
	embed 'org.reflections:reflections:0.9.12' // TODO Need to figure out how to make embed recursive.

	testImplementation "org.mockito:mockito-core:2.+"
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
	// JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
	// We'll use that if it's available, but otherwise we'll use the older option.
	def targetVersion = 8
	if (JavaVersion.current().isJava9Compatible()) {
		 it.options.release = targetVersion
	}
}

task generateMetaFiles {
	ext.embeddedFiles = []
//	doLast {
//		file("${buildDir}/dependencyMeta/").deleteDir()
//		configurations.embed.resolvedConfiguration.resolvedArtifacts.each {
//			// Don't embed anything Minecraft provides anyway.
//			if (configurations.minecraft.resolvedConfiguration.resolvedArtifacts.contains(it)) {
//				return
//			}
//
//			ext.embeddedFiles.add(it.file)
//
//			def metaFile = file("${buildDir}/dependencyMeta/${it.file.name}.meta")
//			metaFile.parentFile.mkdirs()
//			def artifactRef = it.moduleVersion.toString()
//			if (it.classifier != null) {
//				artifactRef += ":${it.classifier}"
//			}
//			metaFile.text = "Maven-Artifact: $artifactRef"
//		}
//	}
}

task embedFilesInJar {
	dependsOn generateMetaFiles
	doLast {
		jar {
			into('/') {
				from generateMetaFiles.embeddedFiles
				from "${buildDir}/dependencyMeta/"
			}
//			manifest {
//				attributes([
//						"Specification-Title"     : "oc2",
//						"Specification-Vendor"    : "Sangar",
//						"Specification-Version"   : "1",
//						"Implementation-Title"    : project.name,
//						"Implementation-Version"  : "${semver}",
//						"Implementation-Vendor"   : "Sangar",
//						"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
//						'ContainedDeps'           : generateMetaFiles.embeddedFiles.collect { it.name }.join(' ')
//				])
//			}
		}
	}
}

jar {
	dependsOn embedFilesInJar
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
		}
	}

	// Select the repositories you want to publish to
	// To publish to maven local, no extra repositories are necessary. Just use the task `publishToMavenLocal`.
	repositories {
		// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	}
}

test {
	useJUnitPlatform()
}
